<!DOCTYPE HTML>
<html>
  <head>
   	<meta charset="utf-8">
		 <meta name="viewport" content="width=device-width, initial-scale=1">
   	<title>Mediasoup</title>
   	<link rel="stylesheet" href="css/materialize.min.css">
	<script src="js/jquery.min.js"></script>

	<script src="js/chartjs.min.js"></script>
	<script src="js/chartjs-plugin-zoom.min.js"></script>
  </head>
  <body>
  	<div class="container">
	  	<div class="row">
		  <div class="col s12 m12">
				<h6>Producers</h6>
		  	<canvas id="producersTime" height="200" onmousedown="resetGraph(event)"></canvas>
		  </div>
		  <div class="col s12 m6">
				<h6>Main process stats</h6>
		  	<canvas id="processResourcesUsage" height="200" onmousedown="resetGraph(event)"></canvas>
      </div>
      <div class="col s12 m6">
				<h6>Workers stats</h6>
		  	<table id="workersTable" class="responsive-table">
					<thead>
						<tr>
								<th>Worker PID</th>
								<th>CPU</th>
								<th>MEM</th>
								<th>Room count</th>
								<th>Audio producers</th>
								<th>Video producers</th>
						</tr>
					</thead>
					<tbody></tbody>
				</table>
			</div>
			<div class="col s12 m6">
				<h6>Workers CPU</h6>
				<canvas id="processWorkersCPUUsage" height="200" onmousedown="resetGraph(event)"></canvas>
			</div>
			<div class="col s12 m6">
				<h6>Workers MEM</h6>
				<canvas id="processWorkersMEMUsage" height="200" onmousedown="resetGraph(event)"></canvas>
			</div>
		</div>
		<div class="row">
			<div class="col s12 m6">
				<canvas id="peerCity" height="200"></canvas>
			</div>
			<div class="col s12 m6"></div>
		</div>
	</div>

	<!-- Compiled and minified JavaScript -->
    <script src="js/materialize.min.js"></script>

	<script>

		
		function reloadRoom(roomId) {
			if (confirm(`Do you really want to reload room ${roomId}`)) {
				$.post('/reload/room/'+roomId)
			}
			// location.reload()
		}

		var timeFormat = 'Y-m-dTH:M:Sz';
		var stats = JSON.parse("<%=JSON.stringify(stats)%>".replace(/&#34;/g,'"'))

		const workerLastStats = stats.processResourcesUsage[stats.processResourcesUsage.length - 1].workers
		console.log(workerLastStats)
		for (const worker of workerLastStats) {
			$('#workersTable > tbody').append(`
					<tr>
						<td>${worker.pid}</td>
						<td>${worker.cpu}</td>
						<td>${Math.round(worker.mem/1024/1024)}mb (${worker.mem_percent}%)</td>
						<td>${worker.room_count}</td>
						<td>${worker.audio_producers}</td>
						<td>${worker.video_producers}</td>
					</tr>
			`)
    }
    
    var ctx = document.getElementById("producersTime").getContext('2d');
		var producersTimeChart = new Chart(ctx, {
		    type: 'line',
		    data: {
		        labels: Object.keys(stats.producers),
		        datasets: [{
		            label: 'Producers count',
		            data: Object.values(stats.producers).map(x => x.total),
		            backgroundColor: [
		                'rgba(255, 99, 132, 0.2)',
		            ],
		            borderColor: [
		                'rgba(255,99,132,1)',
		            ],
		            borderWidth: 1
		        }]
		    },
		    options: {
		    	responsive: true,
		    	pan: {
					enabled: true,
					mode: 'xy',
				},
				zoom: {
					enabled: true,
					mode: 'x',
				},
		        scales: {
		            yAxes: [{
		                ticks: {
		                    beginAtZero:true
		                }
		            }],
		            xAxes: [{
						type: "time",
						time: {
							// round: 'day'
							tooltipFormat: 'll HH:mm'
						},
						scaleLabel: {
							display: true,
							labelString: 'Date'
						},
						ticks: {
							maxRotation: 0
						}
					}, ]
        		}
		    }
    });

		var ctx = document.getElementById("processResourcesUsage").getContext('2d');
		var peerTimeChart = new Chart(ctx, {
		    type: 'line',
		    data: {
		        labels: stats.processResourcesUsage.map(x=>x.date),
		        datasets: [{
		            label: 'Mem',
		            data: stats.processResourcesUsage.map(x=>x.stats.mem),
		            borderColor: [
		                'green',
		            ],
		            borderWidth: 1
		        },
		        {
		            label: 'CPU',
		            data: stats.processResourcesUsage.map(x=>x.stats.cpu),
		            borderColor: [
		                'blue',
		            ],
		            borderWidth: 1
		        }]
		    },
		    options: {
		    	responsive: true,
		    	pan: {
					enabled: true,
					mode: 'xy',
				},
				zoom: {
					enabled: true,
					mode: 'x',
				},
		        scales: {
		            yAxes: [{
		                ticks: {
		                    beginAtZero:true
		                }
		            }],
		            xAxes: [{
						type: "time",
						time: {
							// round: 'day'
							tooltipFormat: 'll HH:mm'
						},
						scaleLabel: {
							display: true,
							labelString: 'Date'
						},
						ticks: {
							maxRotation: 0
						}
					}, ],
					yAxes: [{
						ticks: {
							min: 0, // minimum value
                            max: 100 // maximum value
						}
					}]
        		}
		    }
		});



		function renderWorkers() {
			const datasetCPU = [];
			const datasetMEM = [];

			stats.processResourcesUsage.forEach(x => {
				x.workers.forEach((w, index) => {
					if (!datasetCPU[index]) {
						datasetCPU[index] = {
							pid: w.pid, 
							data: []
						};
					}

					if (!datasetMEM[index]) {
						datasetMEM[index] = {
							pid: w.pid,
							data: []
						};
					}

					datasetCPU[index].data.push(parseFloat(w.cpu))
					datasetMEM[index].data.push(parseFloat(w.mem_percent))
				})
			})
			
			colors = ['green', 'red', 'blue', 'orchid', 'pink', 'bisque', 'chocolate', 'cyan', 'forestgreen', 'gray', 'lightseagreen', 'khaki', 'orchid', 'black', 'yellow']

			var ctx = document.getElementById("processWorkersCPUUsage").getContext('2d');
			var peerTimeChart = new Chart(ctx, {
					type: 'line',
					data: {
							labels: stats.processResourcesUsage.map(x=>x.date),
							datasets: datasetCPU.map((worker, index) => {
								return {
									label: `Worker ${worker.pid}`,
									data: worker.data,
									borderColor: [
										colors[index],
									],
									borderWidth: 1
								}
							})
					},
					options: {
						responsive: true,
						pan: {
						enabled: true,
						mode: 'xy',
					},
					zoom: {
						enabled: true,
						mode: 'x',
					},
							scales: {
									yAxes: [{
											ticks: {
													beginAtZero:true
											}
									}],
									xAxes: [{
							type: "time",
							time: {
								// round: 'day'
								tooltipFormat: 'll HH:mm'
							},
							scaleLabel: {
								display: true,
								labelString: 'Date'
							},
							ticks: {
								maxRotation: 0
							}
						}, ],
						yAxes: [{
							ticks: {
								min: 0, // minimum value
															max: 100 // maximum value
							}
						}]
							}
					}
			});

			var ctx = document.getElementById("processWorkersMEMUsage").getContext('2d');
			var peerTimeChart = new Chart(ctx, {
					type: 'line',
					data: {
							labels: stats.processResourcesUsage.map(x=>x.date),
							datasets: datasetMEM.map((worker, index) => {
								return {
									label: `Worker ${worker.pid}`,
									data: worker.data,
									borderColor: [
										colors[index],
									],
									borderWidth: 1
								}
							})
					},
					options: {
						responsive: true,
						pan: {
						enabled: true,
						mode: 'xy',
					},
					zoom: {
						enabled: true,
						mode: 'x',
					},
							scales: {
									yAxes: [{
											ticks: {
													beginAtZero:true
											}
									}],
									xAxes: [{
							type: "time",
							time: {
								// round: 'day'
								tooltipFormat: 'll HH:mm'
							},
							scaleLabel: {
								display: true,
								labelString: 'Date'
							},
							ticks: {
								maxRotation: 0
							}
						}, ],
						yAxes: [{
							ticks: {
								min: 0, // minimum value
															max: 100 // maximum value
							}
						}]
							}
					}
			});
		}


		renderWorkers()
	</script>
	<script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>

	<!-- <script>
	var data = JSON.parse("".replace(/&#34;/g,'"'))
	function show(roomId) {
		console.log(roomId)
		room = data.find(x => x.roomId == roomId)
		$('#info').show();

		let info = "<h3>Peers</h3>"
			room.peers.forEach((p) => {
				info += `<li><br>
					<div class="card-panel teal">
						<b>Name</b>: ${p.displayName} <br>
						<b>Device</b> ${p.device.name} ${p.device.version}<br>
						<h6>Producers:</h6>
						<ul>`
							p.producers.forEach(producer => {
								info += `<li>
								<b>Type</b>: ${producer.type}
								<b>Protocol</b>: ${producer.ice.protocol}
								<b>IP</b>: ${producer.ice.remoteIP}:${producer.ice.remotePort}
								<b>City</b>: ${producer.ice.geoInfo.city}
								</li>`
							})
						info+= `</ul>
					</div>
				</li><br>`
			})
		$('#info').html(info)
	}
	</script> -->
  </body>
</html>








